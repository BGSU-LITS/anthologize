<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <!-- early on, we can probably not worry about adding in lots of the teiHeader info -->
        <fileDesc>
            <titleStmt>
                <title>hmm, a project?</title>
            </titleStmt>
            <publicationStmt>
                
                <p>This edition produced with the Anthologize blog-to-bookshelf WordPress plugin (http://anthologize.org) </p>
            </publicationStmt>
            <sourceDesc>
                <bibl>
                    <ident><![CDATA[http://localhost/workspace/wordpress/?post_type=projects&p=877]]></ident>
                </bibl>
            </sourceDesc>
        </fileDesc>
        
        <!-- I think the right place to gather metadata will be in the encodingDesc. Would appreciate it if others with TEI skill commented about that. -->
        <outputParams xmlns="http://www.anthologize.org/ns">
            <param name="paper-type">Letter</param>
            <param name="page-width">8.5in</param>
            <param name="page-height">11in</param>
            <param name="font-size">12pt</param>
            <param name="font-family">Times New Roman, Serif</param>
            
        </outputParams>
        
        <encodingDesc>
            <refsDecl>
                <ab type="metadata" subtype="authors">
                    <!-- the anonymous block might be the best way hold metadata about people (and more?) without making TEI mad -->
                    <listPerson> <person xml:id="admin" role="administrator "><persName><forename xmlns:tei="http://www.tei-c.org/ns/1.0">First Name</forename><surname xmlns="http://www.tei-c.org/ns/1.0">Last Name</surname><ident xmlns="http://www.tei-c.org/ns/1.0" type="url"><![CDATA[http://myurl.not.example.com]]></ident></persName></person><person xml:id="boone-gorges" role="subscriber "><persName><forename xmlns:tei="http://www.tei-c.org/ns/1.0"></forename><surname xmlns="http://www.tei-c.org/ns/1.0"></surname><ident xmlns="http://www.tei-c.org/ns/1.0" type="url"><![CDATA[]]></ident></persName></person></listPerson>
                </ab>
                
            </refsDecl>
            <appInfo>
                <application ident="anthologize" version="0.3">
                    <label>Anthologize</label>
                </application>
            </appInfo>
        </encodingDesc>
        <revisionDesc>
            
            <!-- We'll figure out what to put into the revision description when other people figure out how they want to handle it. Since this is the cool political part, we'll put it in our namespace -->
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <!-- TEI @type is designed to be free-form, the content coming from WP will go into @type="post". Everything else we can keep loose and extendable -->
            <div type="part"><head><title>You call that a part?</title><ident type="guid"><![CDATA[http://localhost/workspace/wordpress/?parts=you-call-that-a-part]]></ident><bibl><author ref="admin"/></bibl></head><div type="libraryItem" subtype="html"><head><title>Import from Ning: Import Ning users to Wordpress and BuddyPress</title><ident type="guid"><![CDATA[http://localhost/workspace/wordpress/?library_items=import-from-ning-import-ning-users-to-wordpress-and-buddypress]]></ident><bibl><author ref="boone-gorges"/></bibl></head><body xmlns="http://www.w3.org/1999/xhtml"><p>Import From Ning imports the contents of your Ning Network Archive into BuddyPress.</p>
                
                <p>See the initial announcement <a href="http://teleogistic.net/2010/04/importing-ning-users-into-wp/">here</a>.</p>
                
                <p><strong><a href="http://wordpress.org/extend/plugins/import-from-ning/">Download the most recent version</a></strong></p>
                
                <h2>Instructions</h2>
                <ul><li>Install in your plugins folder and activate. I recommend using the plugin on a fresh WP/BP installation; if running on an installation with existing content, please make a database backup first.</li>
                    <li>Download your Ning network export, using the Archiver tool as described here: <a href="http://help.ning.com/cgi-bin/ning.cfg/php/enduser/std_adp.php?p_faqid=3796">http://help.ning.com/cgi-bin/ning.cfg/php/enduser/std_adp.php?p_faqid=3796</a></li>
                    <li>Upload the content of your unzipped Ning export (a group of .json files, as well as several directories) to import-from-ning/json.</li>
                    
                    <li>Visit the plugin panel at Dashboard &gt; BuddyPress &gt; Import From Ning and follow the instructions</li>
                </ul><h2>Frequently Asked Questions</h2>
                <dl><dt>What if I'm not running BuddyPress?</dt>
                    
                    <dd>Version 2.0 of Import From Ning does not support WordPress standalone. Use version 1.1: http://wordpress.org/extend/plugins/import-from-ning/download/</dd>
                    
                    <dt>What content will Import From Ning import?</dt>
                    
                    <dd>Import From Ning currently imports the following items from a Ning export: members, member profiles, member avatars, members comments (the "wall"), groups, discussions, and blogs. The plugin attempts to recognize inline images and copy them to the BuddyPress installation, so that you don't lose the images you've put in your blog posts.</dd>
                    
                    <dt>What about my images, movies, and music?</dt>
                    
                    <dd>BuddyPress by itself does not currently support photo, movie, or music galleries. The best plugin available for images right now is <a href="http://wordpress.org/extend/plugins/bp-album/">BuddyPress Album+</a> , which is in the process of being adapted to support video and audio galleries as well. In the future, I hope to expand this plugin to import content for display with Album+, but in the meantime you can import your multimedia content manually.</dd>
                    
                    <dt>What do I do if I have a gargantuan network?</dt>
                    
                    <dd>The plugin is most reliable when working with relatively small sets of data, though I have tested it with a network import of over 1300 users. There are various safeguards built into Import From Ning, so that if a particular step fails to complete because your hosting environment runs out of memory, you can simply refresh the page to pick up from where you've left off.</dd>
                    
                    <dt>What's with all these new groups?</dt>
                    
                    <dd>In BuddyPress, each forum must be associated with a group. In cases where your Ning discussion thread was not part of a group, Import From Ning creates a group corresponding to the discussion category and places the discussion topic there.
                        
                    </dd></dl><h2>Be a pal</h2>
                
                <p>I spent many mornings building this plugin, so that WordPress and BuddyPress users - and especially my friends who are WP/BP consultants - could reap the benefits. If you use this plugin (especially for a paying client!) please <strong><a href="http://teleogistic.net/donate">consider a donation</a></strong>.</p>
                
                <p>Import from Ning has been downloaded <strong>[downloadstat url="http://wordpress.org/extend/plugins/import-from-ning/stats/" get="total" autop="false"]</strong> times. Are you using this plugin? Consider a <strong><a href="/donate">donation</a></strong>.</p>
                
                
                <h2>Version history</h2>
                <dl><dt><strong>2.0 - July 23, 2010</strong></dt>
                    <dd>Added support for Ning network content</dd>
                    
                    <dt><strong>1.1 - April 18, 2010</strong></dt>
                    <dd>Switched from copy-and-paste to direct .csv upload</dd>
                    <dd>Added BuddyPress profile field import functionality</dd>
                    
                    <dt><strong>1.0 - April 16, 2010</strong></dt>
                    
                    <dd>Initial release</dd>
                </dl></body></div><div type="libraryItem" subtype="html"><head><title>BuddyPress plugins running on the CUNY Academic Commons</title><ident type="guid"><![CDATA[http://localhost/workspace/wordpress/?library_items=buddypress-plugins-running-on-the-cuny-academic-commons]]></ident><bibl><author ref="boone-gorges"/></bibl></head><body xmlns="http://www.w3.org/1999/xhtml"><p><em>Cross-posted on the <a href="http://dev.commons.gc.cuny.edu/2010/05/25/buddypress-plugins-running-on-the-cuny-academic-commons/">CUNY Academic Commons dev blog</a></em></p>
                    
                    <p>A few people have asked recently for a list of the plugins installed on the <a href="http://commons.gc.cuny.edu">CUNY Academic Commons</a>. In the spirit of <a href="http://prestidigitation.commons.gc.cuny.edu/2009/06/26/macaulay-eportfolios-plugin-list/">Joe's post</a>, here I thought I'd make it public. I'm going to limit myself to the BuddyPress plugins here, for the sake of simplicity. (I'd like to write a series of posts on the anatomy of the CUNY Academic Commons; maybe this will be the first in that series.) Here they are, in no particular order other than the order in which they appear on my plugin list.</p>
                    
                    <ul><li><a href="http://wordpress.org/extend/plugins/bp-tinymce/">BP TinyMCE</a>. This plugin is messed up, and I have part of it switched off, but I still use the filters that allow additional tags through, in case people want to write some raw HTML in their forum posts, etc.</li>
                        
                        <li><a href="http://wordpress.org/extend/plugins/bp-groupblog/">BP Groupblog</a>. Allows blogs to be associated with groups, displaying posts on that group's activity feed and automatically credentialing group members on the blog. I did some custom modifications to the way the plugin works so that clicking on the Blog tab in a group leads you to subdomain address rather than the Groupblog custom address (thereby also ensuring that visitors see the intended blog theme rather than the BP-ish theme).</li>
                        <li><a href="http://wordpress.org/extend/plugins/bp-mpo-activity-filter/">BP MPO Activity Filter</a>. This plugin works along with <a href="http://wpmudev.org/project/More-Privacy-Options/">More Privacy Options</a> to ensure that the new privacy settings are understood by Buddypress and that blog-related activity items are displayed to the appropriate people.</li>
                        <li><a href="http://wordpress.org/extend/plugins/buddypress-group-documents/">BuddyPress Group Documents</a>. This one is crucial to our members, who often use the plugin to share collaborative docs.</li>
                        <li><a href="http://wordpress.org/extend/plugins/bp-include-non-member-comments/">BP Include Non-Member Comments</a> makes sure that blog comments from non-members are included on the sitewide activity feed.</li>
                        
                        <li>BP External Activity - an as-yet unreleased plugin I wrote that brings in items from an external RSS feed and adds them to the sitewide activity feed. We're using it for MediaWiki edits.</li>
                        <li><a href="http://wordpress.org/extend/plugins/bp-group-management/">BP Group Management</a> lets admins add people to groups. Very handy for putting together a group quickly, without having to wait for invites.</li>
                        <li><a href="http://wordpress.org/extend/plugins/bp-system-report/">BP System Report</a>. We're using this one to keep track of some data in our system and report it back to members and administrators.</li>
                        <li><a href="http://wordpress.org/extend/plugins/buddypress-group-email-subscription/">BuddyPress Group Email Subscription</a> allows users to subscribe to immediate or digest email notification of group activity. Right now we're running it on a trial basis with a handful of members, in order to test it. (<a href="http://buddypress.org/community/groups/buddypress-group-email-subscription/forum/topic/allowing-group-email-subscription-access-only-to-a-whitelist/">Here's how to run it with a whitelist of users, if you want</a>)</li>
                        
                        <li>BuddyPress Terms of Service Agreement, another as-yet-unreleased plugin (this one by CAC Dev Team member <a href="http://twitter.com/chris_stein">Chris Stein</a>) that requires new members to check TOS acceptance box before being allowed to register.</li>
                        <li><a href="http://wordpress.org/extend/plugins/custom-profile-filters-for-buddypress/">Custom Profile Filters for BuddyPress</a> allows users to customize the way that their profile interests become links</li>
                        <li><a href="http://wordpress.org/extend/plugins/enhanced-buddypress-widgets/">Enhanced BuddyPress Widgets</a>. Lets the admin decide the default state of BP widgets on the front page.</li>
                        <li><a href="http://wordpress.org/extend/plugins/forum-attachments-for-buddypress/">Forum Attachments for BuddyPress</a>. Another of our most important BP plugins, this one allows users to share files via the group forums.</li>
                        
                        <li><a href="http://wordpress.org/extend/plugins/group-forum-subscription-for-buddypress/">Group Forum Subscription for BuddyPress</a>. This is our legacy email notification system, which is going to be in place until I get back from my honeymoon and can replace it :)</li>
                        <li><a href="http://wordpress.org/extend/plugins/invite-anyone/">Invite Anyone</a> lets our users invite new members to the community and makes it easier to populate groups.</li>
                    </ul><p>Questions about any of these plugins or how they work with BuddyPress? Ask in the comments.</p></body></div></div><div type="part"><head><title>part 2</title><ident type="guid"><![CDATA[http://localhost/workspace/wordpress/?parts=part-2]]></ident><bibl><author ref="admin"/></bibl></head><div type="libraryItem" subtype="html"><head><title>A distributed, multi-client courseware</title><ident type="guid"><![CDATA[http://localhost/workspace/wordpress/?library_items=a-distributed-multi-client-courseware]]></ident><bibl><author ref="boone-gorges"/></bibl></head><body xmlns="http://www.w3.org/1999/xhtml"><p>At yesterday's <a href="http://thatcamp.org">THATCamp</a> I attended a session, facilitated by <a href="http://lenz.unl.edu/wordpress/">Steve Ramsay</a>, entitled "All Courseware Sucks". You can read the blog post that served as the inspiration for the session <a href="http://thatcamp.org/2010/all-courseware-sucks/">at the THATCamp blog</a>. Steve started the session by framing the issue in a way that ended up being quite helpful: he had us list the features of courseware that we'd used, and then to talk about whether they were all crucial. The problem is that almost all of them were crucial to at least someone in the room. Moreover, some of the items that certain individuals found the most useful (say, a gradebook where students could track their progress) seemed the most expendable to others. Listening to that discussion, I thought to myself: This must be what happens in Blackboard focus groups. GÃ¶del's Second Theorem of LMSes: Any learning management system with a vocabulary rich enough to do interesting work can be shown to be bloatware.</p>
                        
                        <p>If it's not the functionality of courseware that we dislike, then, what is it? Well, the basic complaint seems to be that the interface is terrible. And not just terrible in an aesthetic way, though certainly most courseware is absolutely devoid of whimsy. The deeper problem is that software design decisions about how courseware conceives of a course - its hierarchy, its ontology, the vocabulary used to describe its objects, its workflow, its presentation - constrain the instructional design decisions that the professor can make about how the course will be taught.</p>
                        
                        <p>How do you design a courseware interface that jibes with the aesthetic and instructional predilictions of instructors from math, biology, French Lit, and everywhere between? Answer: You don't. There are dozens and dozens of well-developed, general purpose content management systems out there. Each has an interface that its users are comfortable with. Why not take advantage of this fact? If students sometimes prefer Blackboard because at least with Bb they know what they're getting into, why not just let them use whatever they're already comfortable with?</p>
                        
                        <p>The idea in a nutshell: <strong>Abstract the content from the platform, so that individual students and professors can use whatever platform they'd like as an interface</strong>. Existing CMSes like Blackboard, Moodle, WordPress, Drupal, Joomla, and so forth become clients that sync with a central data repository hosted by the school or by a third party.</p>
                        
                        <p>There are about a trillion details that need to be filled in to make this viable. But here's a very rough-n-ready explanation of how it might work in a particular case. Let's imagine that Jack is the professor, using Drupal as client software, and Sally is the student, using WordPress as her preferred client. Jack is going to assign a blog post, and Sally's going to complete it.</p>
                        
                        <ol><li>Jack logs into his Drupal installation. This could be on his own server or on a centralized installation hosted by his school. On this installation there will be a module that creates a number of new content types in addition to the default Story and Page. Let's imagine the content type is called Assignment, which contains fields for content, subject, due date, and whatever other metadata you might like.</li>
                            
                            <li>Jack writes the assignment and saves it. It saves to the Drupal database as a native Drupal item.</li>
                            <li>After the save, a hook is triggered by a Bridge module. Bridges are client-specific translators that send and fetch information to and from the central repository. The Bridge module translates the Drupal content type into an XML or JSON document that is formatted according to the agreed-upon standard data format for Assignments.</li>
                            <li>The Bridge module sends the document to the central Server. The Server can be connected to the student information and registrar systems in much the way that Blackboard is. The Server recognizes Jack's signature on the document, and furthermore knows that the file is associated with Jack's particular course. The document is translated into a Server database object and saved, keyed by Jack's user id, the course id, etc. The Server could be set up to send out email notifications to students at this time, alerting them of a new assignment.</li>
                            <li>The next time Sally logs into her WordPress installation, her WP Bridge plugin (another piece of translating software, this one WP-specific) pings the Server. The Server knows that Sally is in Jack's class, so it looks through the database to see if any new assignments have been posted in that class since Sally last logged in. It finds the blog assignment that Jack posted, translates it to a JSON or XML doc, and sends it to Sally's WordPress installation. The Bridge then parses the document and saves it as a WordPress-native item in the database of Sally's WordPress installation, perhaps as an instance of a custom post type or something like that.</li>
                            <li>Sally visits the course page in her WP installation. This could be an admin panel on the Dashboard, or a front-end page. It shows the new assignment, to write a new blog post.</li>
                            <li>Sally writes a new blog post using the native blog functionality of WP (different content types that aren't so WP-friendly would need a bit of interface or theme work. Discussion forums, for instance, could easily be stored as custom post types and skinned to look like a traditional forum thread). She might indicate, using a certain tag or category or postmeta checkbox, that this blog post belongs to a particular class, or is a response to a particular assignment. The post is saved to the WP database, and, as above, the Bridge plugin then kicks in, translates the post, and sends it back to the Server, where the process will repeat the next time that Jack logs into his installation.</li>
                            
                        </ol><p>As I'm writing this, I realize that it seems really simple and obvious, and I'm sure that there are a hundred reasons why something like this would be hard to actually implement. But it's worth exploration, as this model enjoys the huge advantage of letting the user choose whichever of a number of interfaces suits their fancy.</p>
                        
                        <p>A few complications to mull over, off the top of my head:</p>
                        <ul><li>Certain content is likely not to translate very well between platforms, especially content whose visual presentation is central to its effect. In those instances, the content could be rendered using the client software of the author and linked to in addition to/instead of being transcoded.</li>
                            <li>File storage. Where do you store images, zip files, etc? On the author's client installation, on the Server, or both?</li>
                            <li>Security. How do you ensure that only Jack is able to download assignments for his course? What prot</li></ul></body></div><div type="libraryItem" subtype="html"><head><title>The meat of Facebook</title><ident type="guid"><![CDATA[http://localhost/workspace/wordpress/?library_items=the-meat-of-facebook]]></ident><bibl><author ref="boone-gorges"/></bibl></head><body xmlns="http://www.w3.org/1999/xhtml"><p>danah boyd wrote <a href="http://www.zephoria.org/thoughts/archives/2010/05/15/facebook-is-a-utility-utilities-get-regulated.html">a blog post</a> arguing that Facebook ought to be regulated like a utility. What exactly it means to be a utility, and why utilities ought to be regulated in general, is not the main focus of her piece, and she adds in an addendum that the issue is not so much that FB <em>is</em> a utility as that it <em>is trying to be</em> one. But, in any case, I want to push against the utility analogy with one of my own.</p>
                                
                                <p>I take it that the reason why utilities ought to be regulated is that they are monopolies, and in a single-provider market, people can't realistically use the threat of leaving for a competitor as leverage for bargaining with the monopolistic company. To claim this is the case for Facebook is surely an overstatement: people can and do opt out of using Facebook, and certainly there are enough other social options out there to block the analogy between them and "people who are building cabins in the woods" (an analogy suggested by boyd). Even if Facebook is dominant, it's not a monopoly in the way that utility companies are, so the same arguments for regulation don't really work.</p>
                                
                                <p>The government sees fit to regulate in other sorts of cases, though. Take the meat industry. The government regulates certain aspects of the meat industry (however lax or ill-conceived USDA oversight might be). The justification here is not that the meat industry is monopolistic (though I'm sure it is mostly controlled by a couple conglomerates, and insofar as this is true it should be additionally regulated as a monopoly). Instead, the justification seems to be: 1) this kind of industry has the potential to do great harm if left to its own devices (E. coli and stuff like that), and 2) it is unlikely that many (or any) consumers of this industry's goods are in a position to verify independently the claims of the industry (not many have access to labs where they can test for bacteria, etc). The government is justified in protecting its citizens at their most vulnerable (you might even say this is the primary reason for government). So they're justified in regulating the meat industry.</p>
                                
                                <p>The case of Facebook is parallel. 1) Because people keep a lot of their most important stuff in Facebook, a large amount of harm could be done if Zuck decided to start selling it to advertisers or something more nefarious still. 2) It's difficult, if not impossible, for most people to verify the claims of FB with respect to how FB claims to store and use data. For one thing, the "privacy" settings are arcane to the point of incomprehensibility. And even if you figure out the settings, without access to FB's software and servers, you can't really know whether they're living up to their word. Thus, government regulation might be justified.</p>
                                
                                <p>Someone needs to write <em>The Jungle, Part II: Zuckerpunched</em>.</p></body></div></div></body>
    </text>
</TEI>

